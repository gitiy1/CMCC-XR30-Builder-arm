name: ImmortalWrt Builder(ARM64)

on:
    repository_dispatch:
    workflow_dispatch:
        inputs:
            APP_MTK:
                description: 'Use luci-app-mtk wifi config'
                required: true
                default: false
                type: boolean

env:
    TZ: Asia/Shanghai
    REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
    REPO_BRANCH: openwrt-21.02
    OPENWRT_NAME: hanwckf
    UPLOAD_TAG_NAME: cmcc_xr30
    FEEDS_CONF: feeds.conf.default
    DIY_P1_SH: diy-part1.sh
    DIY_P2_SH: diy-part2.sh

jobs:
    ImmortalWrt-Builder:
        runs-on: ubuntu-24.04-arm

        steps:
            - name: Checkout
              uses: actions/checkout@main
            
            - name: Check space usage
              if: (!cancelled())
              run: df -hT

            - name: Free disk space (Ubuntu)
              uses: jlumbroso/free-disk-space@main
              with:
                tool-cache: false
                android: true
                dotnet: true
                haskell: true
                large-packages: true
                docker-images: true
                swap-storage: true

            - name: Check space usage
              if: (!cancelled())
              run: df -hT

            - name: Initialization environment
              id: init
              env:
                DEBIAN_FRONTEND: noninteractive
              run: |
                sudo -E apt-get -qq update
                sudo -E apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison \
                    build-essential bzip2 ccache cmake cpio curl device-tree-compiler ecj fakeroot \
                    fastjar flex gawk gettext genisoimage git gnutls-dev gperf haveged help2man \
                    intltool irqbalance jq libc6-dev libelf-dev libglib2.0-dev libgmp3-dev \
                    libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libreadline-dev libssl-dev \
                    libtool libyaml-dev libz-dev lrzsz msmtp nano ninja-build p7zip p7zip-full patch \
                    pkgconf python3-dev python3 python3-pip python3-cryptography python3-docutils \
                    python3-ply python3-pyelftools python3-requests qemu-utils quilt re2c rsync scons \
                    sharutils squashfs-tools subversion swig texinfo uglifyjs unzip vim wget xmlto \
                    zlib1g-dev zstd xxd

                # Install Go from official binary distribution
                GO_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n1)
                wget "https://go.dev/dl/${GO_VERSION}.linux-arm64.tar.gz"
                sudo rm -rf /usr/local/go
                sudo tar -C /usr/local -xzf "${GO_VERSION}.linux-arm64.tar.gz"
                rm "${GO_VERSION}.linux-arm64.tar.gz"
                echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
                echo "export GOPATH=/usr/local/go" >> $GITHUB_ENV

                # Install LLVM 18
                wget https://apt.llvm.org/llvm.sh
                chmod +x llvm.sh
                sudo ./llvm.sh 18
                for i in "clang-18" "clang++-18" "clang-cpp-18" "ld.lld-18" "ld64.lld-18" "llc-18" "lld-18" "lld-link-18" "opt-18" "wasm-ld-18"; do
                    sudo ln -svf "$i" "/usr/bin/${i%-18}"
                done
                for i in "/usr/bin"/llvm-*-18; do
                    sudo ln -svf "$i" "${i%-18}"
                done
                
                # Install Node.js
                sudo mkdir -p /etc/apt/keyrings
                curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
                echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
                sudo apt-get update
                sudo apt-get install -y nodejs

                # Install Yarn
                curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/yarn.gpg
                echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
                sudo apt-get update
                sudo apt-get install -y yarn

                # Install UPX
                UPX_REV="4.2.4"
                curl -fLO "https://github.com/upx/upx/releases/download/v${UPX_REV}/upx-$UPX_REV-amd64_linux.tar.xz"
                sudo tar -Jxf "upx-$UPX_REV-amd64_linux.tar.xz"
                sudo rm -rf "/usr/bin/upx" "/usr/bin/upx-ucl"
                sudo cp -fp "upx-$UPX_REV-amd64_linux/upx" "/usr/bin/upx-ucl"
                sudo chmod 0755 "/usr/bin/upx-ucl"
                sudo ln -svf "/usr/bin/upx-ucl" "/usr/bin/upx"

                # Install required tools from OpenWrt source
                git clone --filter=blob:none --no-checkout "https://github.com/openwrt/openwrt.git" "padjffs2"
                cd "padjffs2"
                git config core.sparseCheckout true
                echo "tools/padjffs2/src" >> ".git/info/sparse-checkout"
                git checkout
                cd "tools/padjffs2/src"
                make
                sudo cp -fp "padjffs2" "/usr/bin/padjffs2"
                cd ../../..

                git clone --filter=blob:none --no-checkout "https://github.com/openwrt/luci.git" "po2lmo"
                cd "po2lmo"
                git config core.sparseCheckout true
                echo "modules/luci-base/src" >> ".git/info/sparse-checkout"
                git checkout
                cd "modules/luci-base/src"
                make po2lmo
                sudo cp -fp "po2lmo" "/usr/bin/po2lmo"
                cd ../../../..

                curl -fL "https://build-scripts.immortalwrt.org/modify-firmware.sh" -o "modify-firmware"
                sudo cp -fp "modify-firmware" "/usr/bin/modify-firmware"
                sudo chmod 0755 "/usr/bin/modify-firmware"

                sudo -E apt-get -qq autoremove --purge
                sudo -E apt-get -qq clean
                sudo timedatectl set-timezone "$TZ"
                sudo mkdir -p /workdir
                sudo chown $USER:$GROUPS /workdir
                echo "status=success" >> $GITHUB_OUTPUT

            - name: Clone source code
              id: clone
              if: steps.init.outcome == 'success' && !cancelled()
              working-directory: /workdir
              run: |
                df -hT $PWD
                git clone -b $REPO_BRANCH --single-branch --depth 1 $REPO_URL openwrt
                ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
                echo "status=success" >> $GITHUB_OUTPUT

            # Rest of the steps remain unchanged...
            - name: Load custom feeds & execute diy-part1.sh
              id: feeds
              if: steps.clone.outcome == 'success' && !cancelled()
              run: |
                [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
                chmod +x $DIY_P1_SH
                cd openwrt
                $GITHUB_WORKSPACE/$DIY_P1_SH
                echo "status=success" >> $GITHUB_OUTPUT

            - name: Update & install feeds
              id: feeds-update
              if: steps.feeds.outcome == 'success' && !cancelled()
              run: |
                cd openwrt
                ./scripts/feeds update -a
                ./scripts/feeds install -a
                echo "status=success" >> $GITHUB_OUTPUT

            - name: Move config & execute diy-part2.sh
              id: config
              if: steps.feeds-update.outcome == 'success' && !cancelled()
              run: |
                    cp -f openwrt/defconfig/mt7981-ax3000.config openwrt/.config
                    cp -r $GITHUB_WORKSPACE/backport/* openwrt/
                    chmod +x $DIY_P2_SH
                    cd openwrt
                    $GITHUB_WORKSPACE/$DIY_P2_SH
                    echo "status=success" >> $GITHUB_OUTPUT
            
            - name: Use luci-app-mtk config
              if: github.event.inputs.APP_MTK == 'true'
              run: |
                cd openwrt
                sed -i 's/CONFIG_PACKAGE_luci-app-mtwifi-cfg=y/CONFIG_PACKAGE_luci-app-mtk=y/g' .config
                sed -i 's/CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y/CONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y/g' .config
                sed -i 's/CONFIG_PACKAGE_mtwifi-cfg=y/CONFIG_PACKAGE_wifi-profile=y/g' .config
                sed -i 's/CONFIG_PACKAGE_lua-cjson=y/CONFIG_WIFI_NORMAL_SETTING=y/g' .config

            - name: Download package
              id: package
              if: steps.config.outcome == 'success' && !cancelled()
              run: |
                cd openwrt
                make defconfig
                sed -i 's|^CONFIG_GOLANG_EXTERNAL_BOOTSTRAP_ROOT=.*|CONFIG_GOLANG_EXTERNAL_BOOTSTRAP_ROOT="/usr/local/go"|' .config
                make download -j8
                find dl -size -1024c -exec ls -l {} \;
                find dl -size -1024c -exec rm -f {} \;

            - name: Compile the firmware
              id: compile
              run: |
                cd openwrt
                echo -e "$(($(nproc) + 1)) thread compile"
                make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
                if grep -q 'CONFIG_PACKAGE_mtwifi-cfg=y' .config; then
                        echo "WIFI_INTERFACE=-mtwifi" >> $GITHUB_ENV
                else
                echo "WIFI_INTERFACE=" >> $GITHUB_ENV
                fi
                echo "COMPILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
                echo "status=success" >> $GITHUB_OUTPUT

            - name: Check space usage
              if: (!cancelled())
              run: df -hT

            - name: Organize compiled firmware
              if: steps.compile.outcome == 'success' && !cancelled()
              run: |
                mapfile -t devices < <(grep '^CONFIG_TARGET_DEVICE.*=y' openwrt/.config | sed -r 's/.*DEVICE_(.*)=y/\1/')
                cd openwrt/bin/targets/*/*
                rm -rf packages
                sudo -E apt-get -qq install rename
                for val in "${devices[@]}"; do
                    rename "s/.*${val}/${{ env.COMPILE_DATE }}-${{ env.OPENWRT_NAME }}-${val}${{ env.WIFI_INTERFACE }}/" *
                    echo "$val"
                done
                echo "FIRMWARE=$PWD" >> $GITHUB_ENV
                echo "status=success" >> $GITHUB_OUTPUT

            - name: Upload firmware to Artifacts
              uses: actions/upload-artifact@main
              with:
                name: ${{ env.COMPILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_INTERFACE }}
                path: /workdir/openwrt/bin/targets
